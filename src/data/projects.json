[
  {
    "start": "December 2022",
    "end": "January 2023",
    "name": "Malta Property Analysis",
    "description": [
      "This project aims to find the best real estate investment opportunities in Malta by comparing and ranking properties for sale with similar rental properties. Key features such as location, price, and rental yield are analyzed to identify the highest potential return on investment.",
      "A comprehensive dataset is compiled by scraping multiple real estate agency websites, including Alliance, Belair, Ben Estates, Dhalia, Frank Salt, Remax, Sara Grech, Quicklets and Zanzi. The selenium python package and multithreading were used to efficiently compile the data and provide a thorough understanding of the property market in the area.",
      "Data was collected through multi-threaded scraping and processed to eliminate variations in wording, fill missing values, and calculate the correlation between features and price. The results showed that Remax, Frank Salt, and Zanzi had the most properties for sale, while Sliema had the most rental listings. The sale price was positively correlated with the number of bedrooms, bathrooms, and external area, while the rent price had no correlation with the features analysed.",
      "The data of sale and rental listings are aggregated based on certain columns to compute various median values such as area, price, etc. The final output has 1868 unique groups. The financial metric cash on cash return was calculated and used to rank the top 5 groups with the highest value. The top 5 sales listings are houses of character in Zebbug, Zejtun, and Birkirkara with varying bedrooms and bathrooms, chosen based on their potential profitability."
    ],
    "technologies": [
      "Python",
      "Selenium",
      "Beautiful Soup",
      "SciPy"
    ],
    "buttons": [
      {
        "text": "Repository",
        "link": "https://github.com/brandonabela/Malta-Property-Analysis"
      }
    ],
    "videos": [],
    "images": 3
  },
  {
    "start": "July 2020",
    "end": "June 2021",
    "name": "Stylesheet Comb Formatter",
    "description": [
      "This extension offers a comprehensive solution for formatting stylesheets for CSS, LESS, SCSS, and SASS, improving readability through formatting and property grouping. The implementation involves building a parser for the stylesheet and utilizing an abstract syntax tree to interpret each command accurately.",
      "The properties are then sorted and grouped with their corresponding style family, resulting in a clear and organized layout. With over 600 downloads, the extension can be easily installed through the VS Code extensions marketplace by searching for \"Stylesheet Formatting Extension\"."
    ],
    "technologies": [
      "Typescript"
    ],
    "buttons": [
      {
        "text": "Repository",
        "link": "https://github.com/brandonabela/vscode-stylesheet-comb"
      },
      {
        "text": "Extension Marketplace",
        "link": "https://marketplace.visualstudio.com/items?itemName=BrandonAbela.vscode-stylesheet-comb"
      }
    ],
    "videos": [],
    "images": 2
  },
  {
    "start": "December 2021",
    "end": "March 2022",
    "name": "Brandon Portfolio Website Third",
    "description": [
      "This portfolio website provides a comprehensive overview of skills and accomplishments, showcasing work experience, education, and personal projects through images, reference links, and detailed descriptions. Built with ReactJS, React Bootstrap and NodeJS, the website offers a multi-page layout and is fully responsive, ensuring optimal viewing on any device. The website is styled with React-Bootstrap and SCSS, offering easy customization of colors."
    ],
    "technologies": [
      "Bootstrap Framework",
      "React Framework",
      "SCSS"
    ],
    "buttons": [
      {
        "text": "Repository",
        "link": "https://github.com/brandonabela/brandonabela.github.io"
      }
    ],
    "videos": [],
    "images": 2
  },
  {
    "start": "June 2021",
    "end": "December 2021",
    "name": "JSON Portfolio Website",
    "description": [
      "This project creates a visually engaging, professional portfolio website using the ReactJS and Bootstrap 5 frameworks. Information such as work experience, education, and project details are sourced from JSON files, providing an easy way to update and maintain the site. The website is responsive, adapting to various screen sizes, and is automatically deployed with each commit made to the project.",
      "Key features include the ability to showcase projects through carousels, links, and videos, define personal biography and social media links, and support for education, work, projects, and contact sections. The website is customizable by adjusting the number of entries in the JSON files for education, experience, skills, and projects, as long as the structure remains the same."
    ],
    "technologies": [
      "Bootstrap Framework",
      "React Framework",
      "SCSS"
    ],
    "buttons": [
      {
        "text": "Repository",
        "link": "https://github.com/brandonabela/json-portfolio"
      }
    ],
    "videos": [],
    "images": 3
  },
  {
    "start": "November 2021",
    "end": "December 2021",
    "name": "Data Science Apps",
    "description": [
      "This project showcases various data science applications using the scikit-learn library and the Streamlit framework for interactive visualization. The apps cover simple usage of Streamlit, data exploration, classification, and regression on standard machine learning datasets, as well as additional datasets such as the SP500 and cryptocurrency markets."
    ],
    "technologies": [
      "Python",
      "Streamlit",
      "Matplotlib"
    ],
    "buttons": [
      {
        "text": "Repository",
        "link": "https://github.com/brandonabela/data-science-apps"
      }
    ],
    "videos": [],
    "images": 4
  },
  {
    "start": "July 2021",
    "end": "July 2021",
    "name": "Game Of Life",
    "description": [
      "The Game of Life is a cellular automaton simulation that takes place on a grid. In this simulation, each cell can be in one of two states: alive or dead. The state of the cells is updated in each generation based on a set of predefined rules, which are based on the number of live cells surrounding each cell.",
      "This project extends the original simulation by adding several new features. One of these features is the ability to load and save different board configurations and patterns, allowing for greater flexibility and customization using Swing-based user interface. Additionally, the project includes the ability to control the speed of the simulation by adjusting the frames per second (FPS), providing a smoother and more dynamic viewing experience."
    ],
    "technologies": [
      "Java"
    ],
    "buttons": [
      {
        "text": "Repository",
        "link": "https://github.com/brandonabela/Game-Of-Life"
      }
    ],
    "videos": [],
    "images": 5
  },
  {
    "start": "July 2019",
    "end": "October 2020",
    "name": "8 Ball Pool Analysis",
    "description": [
      "This is project analyses 8 ball pool footage from Miniclip. It identifies potential ball potting paths and provides an animated visualization. The tool uses OpenCV for image processing, combined with vector algebra and graph logic.",
      "The tool can be run from the command-line and has adjustable settings depending on the video input. The default ball and hole sizes are optimized for 1080p displays with 100% zoom and scaling, and may need adjustments for different video resolutions or zoom settings."
    ],
    "technologies": [
      "Python",
      "Open CV 2",
      "Selenium",
      "Matplotlib"
    ],
    "buttons": [
      {
        "text": "Repository",
        "link": "https://github.com/brandonabela/8-Ball-Pool-Analysis"
      }
    ],
    "videos": [],
    "images": 4
  },
  {
    "start": "May 2018",
    "end": "May 2018",
    "name": "Triangle Paths",
    "description": [
      "The project is aimed at finding the minimum path of numbers arranged in the form of a triangle. The process starts at the top of the triangle and moves to adjacent numbers in the row below. The solution is found by using a more efficient approach than brute force, which checks every possible path. The program takes a text file as input and computes the minimum path, which is returned along with its cost.",
      "Before performing the minimum path calculation, the program performs several validations, such as checking if the text file contains letters or if the source file is provided with the command. An example of the program finding the minimum path is also given."
    ],
    "technologies": [
      "C++"
    ],
    "buttons": [
      {
        "text": "Repository",
        "link": "https://github.com/brandonabela/Triangle-Paths"
      }
    ],
    "videos": [],
    "images": 1
  },
  {
    "start": "October 2017",
    "end": "March 2018",
    "name": "Brandon Portfolio Website Second",
    "description": [
      "The objective of this project was to create a portfolio website that showcases my CV information and work portfolio. The development process took approximately 5 months and involved creating a responsive website that adjusts its size according to the device resolution.",
      "The frontend of the website was constructed using AngularJS and Bootstrap frameworks, along with HTML, CSS, and JavaScript. The backend was created using JQuery and PHP.",
      "The website features various capabilities, such as an email contact system, which allows users to reach out to me. The email received can be seen in the carousel. Another key feature is the portfolio filtering, which displays or hides items based on criteria such as website development or game development."
    ],
    "technologies": [
      "HTML",
      "CSS",
      "JQuery",
      "JavaScript",
      "Bootstrap Framework",
      "Angular JS"
    ],
    "buttons": [
      {
        "text": "Website",
        "link": "https://brandonabela.gitlab.io/"
      }
    ],
    "videos": [],
    "images": 4
  },
  {
    "start": "November 2017",
    "end": "January 2018",
    "name": "Chess Game in Java",
    "description": [
      "This task involved creating a Chess Game Analysis that processes a text file containing moves, some of which may be invalid. From this text file, various analytics were generated, including the most frequently moved piece, the winning player, and the number of invalid moves.",
      "The text file was used to present a graphical representation of the game state. The chess logic incorporated features like castling and pawn promotion. The project taught me to utilize design patterns such as the observer pattern and to ensure that each method has a single, clear purpose."
    ],
    "technologies": [
      "Java"
    ],
    "buttons": [],
    "videos": [],
    "images": 3
  },
  {
    "start": "November 2017",
    "end": "January 2018",
    "name": "LegOOPolis in C++",
    "description": [
      "A C++-based Lego Building Simulator was developed to process specifications from a text file, including the number of lego blocks, windows, doors, and the number of required buildings (e.g. 5 universities and 3 one-story houses). This task enabled experimentation with object-oriented programming and creation of a linked list library. Several classes were designed for reuse, such as a templated linked list library. The simulation then calculated statistics based on the file specifications, including the number of successfully built buildings and the percentage built from the text file."
    ],
    "technologies": [
      "C++"
    ],
    "buttons": [],
    "videos": [],
    "images": 3
  },
  {
    "start": "December 2017",
    "end": "January 2018",
    "name": "Algorithms in Golang",
    "description": [
      "To learn the Go programming language, several algorithms were programmed, including:",
      "The Fibonacci function using both direct and indirect recursion. The Reverse function, which was implemented using an iterative approach with a temporary variable to loop through half the array.",
      "The Map function, which applies a specified function to each value in a list (e.g. applying multiplyBy2 to [5, 2, 7] returns [10, 4, 14]). The Filter function, which filters a list based on a boolean function (e.g. applying the isEven function to [2, 7, 4] returns [2, 4]). The Reduce function, which returns a single value that reflects the combined version of a list (e.g. using the addition function on [5, 3, 7] returns 15).",
      "Once familiar with the Go syntax, several programs were implemented using channels. Through the use of channels, the power of concurrent systems became evident. Some of the functions implemented using channels include:",
      "The Tail function, which takes a channel of values and discards the first value while pushing the rest into an output channel, resulting in the tail of the passed array when read. The Fibonacci function, which takes an output channel and generates a Fibonacci value each time the output channel is called. This function also makes use of another method that uses channels within channels, such as the Prefix function, which takes a value and pushes it at the head of the channel."
    ],
    "technologies": [
      "Golang"
    ],
    "buttons": [],
    "videos": [],
    "images": 2
  },
  {
    "start": "October 2017",
    "end": "November 2017",
    "name": "Mobile Network Simulation",
    "description": [
      "A telecommunication network system was developed using Erlang Language, consisting of 3 major modules: switch, server generic, and mobile. Additionally, a utility module was created to handle standard functions such as fetching, storing, and removing based on a list. These modules also handle error handling in the program.",
      "The switch manages tasks such as subscribing and unsubscribing phones, attaching and detaching them, and sending messages. To attach a phone to the switch, you need to call the attach function method after registering the phone through subscribing.",
      "The server generic manages transmission types such as synchronous and asynchronous calls, and controls the main loop of the program where certain functions are executed.",
      "The mobile module handles tasks like instantiating a mobile, terminating a phone process, turning it on and off, toggling flight mode, sending and reading messages. If a phone's flight mode is on, messages sent to that phone are received."
    ],
    "technologies": [
      "Erlang"
    ],
    "buttons": [],
    "videos": [],
    "images": 4
  },
  {
    "start": "September 2017",
    "end": "September 2017",
    "name": "Image Processing in Haskell",
    "description": [
      "A set of algorithms were developed in Haskell to learn the programming language, mainly focused on image processing.",
      "The initial algorithms used a library to access data structures such as RGB and processed images pixel by pixel. Some of the algorithms developed include flipping images vertically, darkening, desaturating, and selective desaturating, which enhances a specific colour in an image.",
      "Function composition was then utilized to create functions that take a pixel and perform specific actions. A number of algorithms were developed, including flipping images vertically, redden, desaturate, fade, superimposing multiple images, and defining a new operator to superimpose images.",
      "With further understanding of these principles, data structures were utilized to create a structure that converts colour structures to RGB or vice versa, using specific data structures such as HSV to RGB. Algorithms were developed to recolour images based on a function, desaturate based on HSV colour, and invert RGB. These algorithms used a data structure commonly used in compression, which divides an image into quadrants and continues to split them until blocks of the same colour are found. This data structure was used to create an optimized version of an image.",
      "Another data structure developed was the colour model, which takes a colour of any type and has functions to brighten and redden it. Instances of this data structure were created for specific colour formats such as HSV and RGB."
    ],
    "technologies": [
      "Haskell"
    ],
    "buttons": [],
    "videos": [],
    "images": 5
  },
  {
    "start": "March 2017",
    "end": "May 2017",
    "name": "System Console in C",
    "description": [
      "A system console was developed in C on the Linux operating system, consisting of three parts.",
      "One section of the console is the clock, which operates by creating a child process from the parent process. This process updates a shared memory segment, which the main program reads, allowing the main process to update the panel based on the memory segment's values.",
      "Another part of the console catches signals generated by another program. Every received signal is recorded, and the time difference between two signals is calculated. A colour is lit based on the time difference. The other process can signal this process using the unique process ID, displayed at the bottom of the panel.",
      "The main part of the console is the terminal window, using Linux as an intermediary between the program and the user. Additional functions were written into the program, such as writing the command response to a desired text file and scrolling within the window using commands like \"move -5\". The application uses standard Linux commands, such as \"ps\", to display a list of running processes in the respective panel."
    ],
    "technologies": [
      "C"
    ],
    "buttons": [],
    "videos": [],
    "images": 7
  },
  {
    "start": "November 2016",
    "end": "January 2017",
    "name": "Tree Data Structure in C",
    "description": [
      "I built a tree data structure with standard optimizations for adding, deleting, and editing nodes. These functions were packaged as a library for use in other projects with similar requirements. The advantage of this data structure was the availability of necessary methods and desired parameters.",
      "The tree structure was designed to store text files, where a node can be either a folder or a text file. If the node is a text file, it has no children and is considered a leaf. A folder serves as a parent and can hold multiple nodes. Additionally, the program was designed to support saving and loading the data structure, allowing the user to store it on their computer and resume editing later."
    ],
    "technologies": [
      "C"
    ],
    "buttons": [],
    "videos": [],
    "images": 6
  },
  {
    "start": "November 2016",
    "end": "January 2017",
    "name": "Algorithms in C",
    "description": [
      "A set of algorithms were developed to learn the C programming language.",
      "One of the algorithms was to read a specified number of lines from a text file, given as program arguments, and display each line to the user. Another similar program was the \"tail\" program which, using program arguments, sets the number of lines to be read from the end of the text file.",
      "The \"tokenizer\" program was also implemented. Based on a predefined location of a text file, it tokenized the text based on certain conditions. For example, special characters were ignored, integers and floats were considered separate tokens, and strings and elements enclosed in brackets were stored as strings.",
      "An algorithm to think in a recursive manner was the reversal of a given string, either using an iterative or recursive approach. The \"introspect\" program helped to understand the memory system in the C programming language, which many languages do not provide such insight into. It was observed that a given string was stored as a block of memory, with memory locations incremented by one for each character.",
      "Finally, the \"Levenshtein String Distance\" program was implemented, which calculates the minimum number of edits required to convert one string into another. This algorithm is commonly used in data structures and algorithms."
    ],
    "technologies": [
      "C"
    ],
    "buttons": [],
    "videos": [],
    "images": 5
  },
  {
    "start": "July 2015",
    "end": "October 2015",
    "name": "Garage Scene",
    "description": [
      "This task involved using various applications, including Maya, Photoshop, and Quixel NDO toolkit, to create specular and normal maps. Although I was familiar with the software, this gave me the opportunity to explore lighting and mapping more, as seen in the carousel.",
      "The scene was set in a garage, featuring a running robot and an Audi R8 car. The models were designed to be usable in a game once the scene was finished and rendered. The Maya Mental Ray plugin was used for rendering, providing detailed textures and refined render settings, such as sampling quality and global illumination.",
      "Additionally, this task involved creating a rig for the robot to run and using the animation in the game. It also allowed me to modify the curve animation for a robot-like movement without acceleration at the ends and a smooth looping transition."
    ],
    "technologies": [
      "Autodesk Maya"
    ],
    "buttons": [],
    "videos": [
      "https://www.youtube.com/embed/y2D36klJ4b4"
    ],
    "images": 3
  },
  {
    "start": "May 2015",
    "end": "July 2015",
    "name": "Tower Shape",
    "description": [
      "This task involved developing a mobile game along with a logo for the Google Play Store. The objects and backgrounds were created with the target device in mind, using Photoshop and Unity.",
      "The game features a responsive UI and touch screen for gameplay. The biggest challenge was integrating a database from various platforms to add new high scores or download the top 5 player scores. This required accessing the database from the device and executing specific SQL queries."
    ],
    "technologies": [
      "JavaScript (Unity)"
    ],
    "buttons": [],
    "videos": [
      "https://www.youtube.com/embed/uYPbgNjZT_0"
    ],
    "images": 2
  },
  {
    "start": "November 2014",
    "end": "May 2015",
    "name": "Litter Monster",
    "description": [
      "This game was created as a product for a youth enterprise and marketed as an educational tool for children. Its goal is to educate kids about the environment through pop-up questions that only advance if the correct answer is selected. During the development process, I was able to experiment with marketing strategies, pitch the game to the Minister of Education, and draft a business proposal.",
      "As the product was sold, I received feedback about the game, even though it was tested by others before release. The goal is to introduce this educational game in schools to educate students in a fun and interactive way.",
      "I also designed logos for the game, which required a creative approach to capturing the intended concept digitally. Several logos were created with different colour variations and were presented to the team before selecting the final one."
    ],
    "technologies": [
      "C# (Unity)"
    ],
    "buttons": [
      {
        "text": "Visit Game Store",
        "link": "http://www.indiedb.com/games/litter-monster/"
      }
    ],
    "videos": [
      "https://www.youtube.com/embed/ALhI1H5fCwI"
    ],
    "images": 7
  }
]